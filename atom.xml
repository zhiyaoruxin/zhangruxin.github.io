<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZRX</title>
  
  <subtitle>rx</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zrxmzy.github.io.git/"/>
  <updated>2020-04-28T04:03:42.247Z</updated>
  <id>http://zrxmzy.github.io.git/</id>
  
  <author>
    <name>张如心</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python正则re</title>
    <link href="http://zrxmzy.github.io.git/2020/04/28/py-re/"/>
    <id>http://zrxmzy.github.io.git/2020/04/28/py-re/</id>
    <published>2020-04-28T03:27:17.000Z</published>
    <updated>2020-04-28T04:03:42.247Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于python中正则表达式的使用整理一波<br><a id="more"></a></p><h1 id="import-re"><a href="#import-re" class="headerlink" title="import re"></a>import re</h1><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><ol><li>正则表达式 - findall方法<br> re.findall(匹配规则，原始文本)  得到的是一个列表<pre><code> \d 表示匹配一个数字  \d\d\d表示匹配三个数字</code></pre></li><li>正则表达式 - 非贪婪匹配（.*?）</li></ol><div class="table-container"><table><thead><tr><th>正则表达式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>\d</td><td style="text-align:left">匹配一个数字字符</td></tr><tr><td>\w</td><td style="text-align:left">匹配一个字母、数字及下划线字符</td></tr><tr><td>\s</td><td style="text-align:left">匹配一个空白字符</td></tr><tr><td>\S</td><td style="text-align:left">匹配一个非空白字符</td></tr><tr><td>\n</td><td style="text-align:left">匹配一个换行符</td></tr><tr><td>\t</td><td style="text-align:left">匹配一个制表符</td></tr><tr><td>.</td><td style="text-align:left">匹配一个任意的字符，换行符除外</td></tr><tr><td>*</td><td style="text-align:left">匹配前面的字符无限次直到停止</td></tr><tr><td>?</td><td style="text-align:left">常和.与*配合使用，组成非贪婪匹配</td></tr><tr><td>()</td><td style="text-align:left">匹配括号内的表达式，也表示一个组</td></tr><tr><td>^</td><td style="text-align:left">匹配行的开头</td></tr><tr><td>\A</td><td style="text-align:left">匹配字符串开头</td></tr></tbody></table></div><ol><li><p>非贪婪匹配.*?</p><pre><code class="lang-python">     res = &#39;&lt;h3 class=&quot;c-title&quot;&gt;&lt;a href=&quot;http://news.hexun.com/2018-12-12/195521925.html&quot; data-click=&quot;{一堆英文}&quot;&gt;&lt;em&gt;阿里巴巴&lt;/em&gt;电商脱贫成“教材” 累计培训逾万名县域干部&lt;/a&gt;&#39;     p_title = &#39;&lt;h3 class=&quot;c-title&quot;&gt;.*?&gt;(.*?)&lt;/a&gt;&#39;     result3 = re.findall(p_title,res)     print(result3)</code></pre></li><li><p>正则表达式 - 自动考虑换行<br> re.findall(匹配规则，原始文本，re.S)</p></li><li>正则表达式 - 小知识点<br> sub()方法：<pre><code> re.sub(需要替换的内容，替换值，源字符串)</code></pre> []中括号的用法<pre><code> 1. 在中括号里的内容不再有特殊含义     company = &#39;*华能信托&#39;     company = re.sub(&#39;[*]&#39;,company)     print(company) 2. 表示某几个的范围，比如把日期中的年月日换成-号     date = &#39;2018年12月12日&#39;     date = re.sub(&#39;[年月日]&#39;，&#39;-&#39;,date)     date = date[:-1]     print(date)     date = date[:-1]其实是一个字符串切片，这个的含义就是取该字符串除了最后一个元素的其他元素</code></pre> 数据清洗并打印输出<pre><code> 清理新闻标题     字符串.strip()函数把不需要的空格和换行符去掉</code></pre></li></ol><h2 id="re模块常量"><a href="#re模块常量" class="headerlink" title="re模块常量"></a>re模块常量</h2><ul><li>re模块中有9个常量，常量的值都是int类型</li></ul><div class="table-container"><table><thead><tr><th>常量</th><th>简写</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>re.IGNORECASE</td><td>re.l</td><td style="text-align:left">进行忽略大小写匹配</td></tr><tr><td>re.ASCII</td><td>re.A</td><td style="text-align:left">让\w,\W,\b,\B,\d,\D,\s,\S只匹配ASCII，而不是Unicode</td></tr><tr><td>re.DOTALL</td><td>re.S</td><td style="text-align:left">DOT表示.,ALL表示所有，连起来就是.匹配所有，包含换行符\n,默认模式下，是不能匹配换行符\n的</td></tr><tr><td>re.MULTILINE</td><td>re.M</td><td style="text-align:left">多行模式，当某个字符串中有换行符\n，默认模式下是不支持换行符特性的，比如行开头和行结尾，而多行模式下是支持匹配行开头的</td></tr><tr><td>re.VERBOSE</td><td>re.X</td><td style="text-align:left">详细模式，可以在正则表达式中加注解</td></tr><tr><td>re.LOCALE</td><td>re.L</td><td style="text-align:left">由当前语言区域决定\w,\b和大小写敏感匹配，这个标识只能对byte样式有效</td></tr><tr><td>re.UNICODE</td><td>re.U</td><td style="text-align:left">与ASCII模式类似，匹配Unicode编码支持的字符</td></tr><tr><td>re.DEBUG</td><td></td><td style="text-align:left">显示编译时的debug信息</td></tr><tr><td>re.TEMPLATE</td><td>re.T</td><td style="text-align:left">禁用回溯</td></tr></tbody></table></div><ul><li>常量总结：<ol><li>9个常量中，前5个（IGNORECASE,ASCII,DOTALL,MULTILINE,VERBOSE）有用处，有2个（LOCALE,UNICODE）官方不建议使用，2个（TEMPLATE,DEBUG）实验性功能，不能依赖</li><li>常量在re常用函数中都可以使用。</li><li>常量可叠加使用，因为常量值都是2的幂次方，叠加时使用|符号，不能使用+符号 如：re.findall(pattern,text,re.IGNORECASE|re.MULTILINE)</li></ol></li></ul><h2 id="re模块函数"><a href="#re模块函数" class="headerlink" title="re模块函数"></a>re模块函数</h2><p>re模块中有12个函数</p><ol><li>查找一个匹配项<ol><li>search： 查找任意位置的匹配项</li><li>match： 必须从字符串开头匹配</li><li>fullmatch： 整个字符串与正则完全匹配<br>案例：<pre><code> import re text = &#39;a猪哥大帅b，猪哥大帅b&#39; pattern = r&#39;猪哥大帅b&#39; print(re.search(pattern,text).group())  # 猪哥大帅b print(re.match(pattern,text))  # None print(re.fullmatch(pattern,text)) # None</code></pre>注： 查找一个匹配项，返回的都是一个匹配对象（Match）</li></ol></li><li>查找多个匹配项<ol><li>findall： 从字符串任意位置查找，返回一个列表</li><li>finditer： 从字符串任意位置查找，返回一个迭代器<br>案例：<pre><code> import re text = &#39;a猪哥大帅b，猪哥大帅b&#39; pattern = r&#39;猪哥大帅b&#39; print(re.findall(pattern,text)) # [&#39;猪哥大帅b&#39;, &#39;猪哥大帅b&#39;] print(list(re.finditer(pattern,text))) # [&lt;re.Match object; span=(1, 6), match=&#39;猪哥大帅b&#39;&gt;, &lt;re.Match object; span=(7, 12), match=&#39;猪哥大帅b&#39;&gt;]</code></pre>注： 如果可能存在大量的匹配项的haul，建议使用finditer函数，一般情况使用findall函数</li></ol></li><li>分割<br> re.split(pattern,string,maxsplit=0,flags=0)函数：<pre><code> pattern分开string maxsplit表示最多进行分割次数 flags表示模式</code></pre> 案例：<pre><code>     import re     text = &#39;a猪哥大帅b，猪哥大帅b&#39;     pattern = r&#39;，&#39;     print(re.split(pattern,text,maxsplit=1,flags=re.IGNORECASE))  # [&#39;a猪哥大帅b&#39;, &#39;猪哥大帅b&#39;]</code></pre> 注： 在不需要正则支持且数据量和数次不多的情况下使用str.split函数更合适，反之使用re.split函数</li><li>替换<ol><li>re.sub(pattern,repl,string,count=0,flags=0)<br> repl替换掉string中被pattern匹配的字符<br> count表示最大替换次数<br> flags表示正则表达式的常量</li><li>re.subn(pattern,repl,string,count=0,flags=0) 返回一个元组（字符串，替换次数）</li></ol></li><li>编译正则对象<br> compile函数和template函数  将正则表达式的样式编译成一个正则表达式对象<br> 案例：<pre><code>     import re     text = &#39;a猪哥大帅b，猪哥大帅b&#39;     pattern = r&#39;猪哥大帅b&#39;     pattern_obj = re.compile(pattern)     print(pattern_obj.search(text).group())</code></pre></li><li>其他<br> re.escape(pattern) 可以转义正则表达式中具有特殊含义的字符，如.或*<br> 案例：<pre><code>     import re     text = &#39;a猪哥.大帅b，猪哥*大帅b&#39;     pattern = re.escape(&#39;猪哥.大帅&#39;)     print(&quot;转义后的pattern：&quot;+pattern ) # 转义后的pattern：猪哥\.大帅     print(re.search(pattern,text).group())  # 猪哥.大帅</code></pre> re.purge()函数只用就是清除正则表达式缓存</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于python中正则表达式的使用整理一波&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://zrxmzy.github.io.git/categories/python/"/>
    
    
      <category term="正则表达式" scheme="http://zrxmzy.github.io.git/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>9个技巧，让if else更优雅</title>
    <link href="http://zrxmzy.github.io.git/2020/04/24/ifelse/"/>
    <id>http://zrxmzy.github.io.git/2020/04/24/ifelse/</id>
    <published>2020-04-24T01:24:37.000Z</published>
    <updated>2020-04-24T02:21:52.557Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>if else 是我们写代码时，使用频率最高的关键字之一，本文主要详解如何让看起来烦人的if else看起来更优雅。<br><a id="more"></a><br>本文提供了9中方法来解决那些”烦人”的if else</p><h2 id="1-使用return"><a href="#1-使用return" class="headerlink" title="1. 使用return"></a>1. 使用return</h2><ul><li>优化前代码<pre><code>  if (str.equals(&quot;java&quot;)) {      // 业务代码 ! true;  } else {      return ;  }</code></pre></li><li>优化后代码<pre><code>  if (str.equals(&quot;java&quot;)) {     return ;  }  return false; </code></pre></li></ul><h2 id="2-使用Map"><a href="#2-使用Map" class="headerlink" title="2. 使用Map"></a>2. 使用Map</h2><ul><li>优化前代码：<pre><code>  if (t == 1) {      type = &quot;name&quot;;  } else if (t == 2) {      type = &quot;id&quot;;  } else if (t == 3) {      type = &quot;mobile&quot;;  }</code></pre></li><li>我们先定义一个 Map 数组，把相关判断信息存储起来：<pre><code>  Map&lt;Integer, String&gt; typeMap = new HashMap&lt;&gt;();  typeMap.put(1, &quot;name&quot;);  typeMap.put(2, &quot;id&quot;);  typeMap.put(3, &quot;mobile&quot;);</code></pre></li><li>之前的判断语句可以使用以下一行代码代替了：<pre><code>  type = typeMap.get(ty);</code></pre></li></ul><h2 id="3-使用三元运算符"><a href="#3-使用三元运算符" class="headerlink" title="3. 使用三元运算符"></a>3. 使用三元运算符</h2><p>三元运算符也叫三元表达式或三目运算符/表达式</p><ul><li>优化前代码：<pre><code>  Integer score = 81;  if (score &gt; 80) {      score = 100;  } else {      score = 60;  }</code></pre></li><li>优化后代码：<pre><code>  score = score &gt; 80 ? 100 : 60;</code></pre></li></ul><h2 id="4-合并表达式"><a href="#4-合并表达式" class="headerlink" title="4. 合并表达式"></a>4. 合并表达式</h2><p>在项目中有些逻辑判断可以通过梳理和归纳，变更为更简单易懂的逻辑判断代码</p><ul><li>优化前代码：<pre><code>  String city = &quot;西安&quot;;  String area = &quot;029&quot;;  String province = &quot;陕西&quot;;  if (&quot;西安&quot;.equals(city)) {      return &quot;xi&#39;an&quot;;  }  if (&quot;029&quot;.equals(area)) {      return &quot;xi&#39;an&quot;;  }  if (&quot;陕西&quot;.equals(province)){      return &quot;xi&#39;an&quot;;  }</code></pre></li><li>优化后代码：<pre><code>  if (&quot;西安&quot;.equals(city) || &quot;029&quot;.equals(area) || &quot;陕西&quot;.equals(province)){      return &quot;xi&#39;an&quot;;  }</code></pre></li></ul><h2 id="5-使用枚举"><a href="#5-使用枚举" class="headerlink" title="5. 使用枚举"></a>5. 使用枚举</h2><p>JDK1.5 引入了新的类型 - 枚举（enum）</p><ul><li>优化前代码：<pre><code>  Integer typeId = 0;  String type = &quot;Name&quot;;  if (&quot;Name&quot;.equals(type)) {      typeId = 1;  } else if (&quot;Age&quot;.equals(type)) {      typeId = 2;  } else if (&quot;Address&quot;.equals(type)) {      typeId = 3;  }</code></pre></li><li>优化时，我们先来定义一个枚举：<pre><code>  public enum TypeEnum {      Name(1), Age(2), Address(3);      public Integer typeId;      TypeEnum(Integer typeId) {          this.typeId = typeId;      }  }</code></pre></li><li>之前的 if else 判断就可以被如下一行代码所替代了：<pre><code>  typeId = TypeEnum.valueOf(&quot;Name&quot;).typeId;</code></pre></li></ul><h2 id="6-使用Optional"><a href="#6-使用Optional" class="headerlink" title="6. 使用Optional"></a>6. 使用Optional</h2><p>JDK1.8 引入了Optional类，JDK1.9进行了改造，增加了ifPresentOrElse()方法</p><ul><li>优化前代码：<pre><code>  String str = &quot;java&quot;;  if (str == null) {      System.out.println(&quot;Null&quot;);  } else {      System.out.println(str);  }</code></pre></li><li>优化后代码：<pre><code>  Optional&lt;String&gt; opt = Optional.of(&quot;java&quot;);  opt.ifPresentOrElse(v -&gt;   System.out.println(v), () -&gt; System.out.println(&quot;Null&quot;));</code></pre><strong> 小贴士：注意运行版本，必须是 JDK 9+ 才行。</strong></li></ul><h2 id="7-梳理优化判断逻辑"><a href="#7-梳理优化判断逻辑" class="headerlink" title="7. 梳理优化判断逻辑"></a>7. 梳理优化判断逻辑</h2><ul><li>优化前代码：<pre><code>  // 年龄大于 18  if (age &gt; 18) {      // 工资大于 5000      if (salary &gt; 5000) {          // 是否漂亮          if (pretty == true) {              return true;          }      }  }  return false;</code></pre></li><li>优化后代码：<pre><code>  if (age &lt; 18) {      return false;  }  if (salary &lt; 5000) {      return false;  }  return pretty == true; </code></pre><strong> 我们需要尽量把表达式中的包含关系改为平行关系，这样代码可读性更高，逻辑更清晰。</strong></li></ul><h2 id="8-使用多态"><a href="#8-使用多态" class="headerlink" title="8. 使用多态"></a>8. 使用多态</h2><p>封装、继承和多态是OOP（面向对象编程）的重要思想，提供一种去除ifelse方法</p><ul><li>优化前代码：<pre><code>  Integer typeId = 0;  String type = &quot;Name&quot;;  if (&quot;Name&quot;.equals(type)) {      typeId = 1;  } else if (&quot;Age&quot;.equals(type)) {      typeId = 2;  } else if (&quot;Address&quot;.equals(type)) {      typeId = 3;  }</code></pre></li><li><p>使用多态，我们先定义一个接口，在接口中声明一个公共返回 typeId 的方法，在添加三个子类分别实现这三个子类，实现代码如下：</p><pre><code>  public interface IType {      public Integer getType();  }  public class Name implements IType {      @Override      public Integer getType() {          return 1;      }  }  public class Age implements IType {      @Override      public Integer getType() {          return 2;      }  }  public class Address implements IType {      @Override      public Integer getType() {          return 3;      }  }</code></pre><p><strong> 注意：为了简便我们这里把类和接口放到了一个代码块中，在实际开发中应该分别创建一个接口和三个类分别存储。</strong></p></li><li>此时，我们之前的 if else 判断就可以改为如下代码：<pre><code>  IType itype = (IType) Class.forName(&quot;com.example.&quot; + type).newInstance();  Integer typeId = itype.getType();</code></pre></li></ul><h2 id="9-选择性的使用switch"><a href="#9-选择性的使用switch" class="headerlink" title="9. 选择性的使用switch"></a>9. 选择性的使用switch</h2><p>ifelse和switch两者都能使用的情况下，可以尽可能使用switch，因为switch在常量分支选择时，switch性能会比ifelse高</p><ul><li>if else 判断代码：<pre><code>  if (cmd.equals(&quot;add&quot;)) {      result = n1 + n2;  } else if (cmd.equals(&quot;subtract&quot;)) {      result = n1 - n2;  } else if (cmd.equals(&quot;multiply&quot;)) {      result = n1 * n2;  } else if (cmd.equals(&quot;divide&quot;)) {      result = n1 / n2;  } else if (cmd.equals(&quot;modulo&quot;)) {      result = n1 % n2;  }</code></pre></li><li>switch 代码：<pre><code>  switch (cmd) {      case &quot;add&quot;:          result = n1 + n2;          break;      case &quot;subtract&quot;:          result = n1 - n2;          break;      case &quot;multiply&quot;:          result = n1 * n2;          break;      case &quot;divide&quot;:          result = n1 / n2;          break;      case &quot;modulo&quot;:          result = n1 % n2;          break;  }</code></pre></li><li>在 Java 14 可使用 switch 代码块，实现代码如下：<pre><code>  // java 14  switch (cmd) {      case &quot;add&quot; -&gt; {          result = n1 + n2;      }      case &quot;subtract&quot; -&gt; {          result = n1 - n2;      }      case &quot;multiply&quot; -&gt; {          result = n1 * n2;      }      case &quot;divide&quot; -&gt; {          result = n1 / n2;      }      case &quot;modulo&quot; -&gt; {          result = n1 % n2;      }  }</code></pre></li></ul><p><strong> 源自：’脚本之家’微信公众号 </strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;if else 是我们写代码时，使用频率最高的关键字之一，本文主要详解如何让看起来烦人的if else看起来更优雅。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://zrxmzy.github.io.git/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://zrxmzy.github.io.git/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>人生的一堂课</title>
    <link href="http://zrxmzy.github.io.git/2020/04/23/life/"/>
    <id>http://zrxmzy.github.io.git/2020/04/23/life/</id>
    <published>2020-04-23T11:03:27.000Z</published>
    <updated>2020-04-23T11:26:01.977Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>人生没有白走的路，每一步都算数；没有不该遇到的人，每一个人都是我们成长的催化剂。<br><a id="more"></a><br>&emsp;&emsp;回首，人生已过去了三分之一<br>&emsp;&emsp;在这个喧杂的社会中，很难保持一个真心，时刻做自己。在生活中、事业上我们都想走捷径，很浮躁。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生没有白走的路，每一步都算数；没有不该遇到的人，每一个人都是我们成长的催化剂。&lt;br&gt;
    
    </summary>
    
    
      <category term="人生" scheme="http://zrxmzy.github.io.git/categories/%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="life" scheme="http://zrxmzy.github.io.git/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>《解忧杂货店》</title>
    <link href="http://zrxmzy.github.io.git/2020/04/21/melancholy/"/>
    <id>http://zrxmzy.github.io.git/2020/04/21/melancholy/</id>
    <published>2020-04-21T08:52:17.000Z</published>
    <updated>2020-04-21T09:40:50.327Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>人生就是一张白纸，需要我们自己构图，绘色。心有多大，舞台就有多大。<br><a id="more"></a></p><h2 id="解忧"><a href="#解忧" class="headerlink" title="解忧"></a>解忧</h2><ol><li><h5 id="小孩问，不用学习怎样可以考100分-？"><a href="#小孩问，不用学习怎样可以考100分-？" class="headerlink" title="小孩问，不用学习怎样可以考100分 ？"></a>小孩问，不用学习怎样可以考100分 ？</h5>&emsp;&emsp;浪矢爷爷回答的。对问问题的小孩说，可以让老师给你一份考卷，全部都是关于你自己的问题，这样不管怎么回答都是100分。这样很机智的回答对小孩的人生有很大的帮助，后来小孩当了教师，面对不善交流的学生，想起来当时浪矢爷爷的回答，每天抽取一个学生，让其他学生回答关于他的问题，这样就增进了他们之间的感情交流。</li><li><h5 id="保罗（浩介）询问要不要跟公司欠了巨债的父母连夜潜逃-？"><a href="#保罗（浩介）询问要不要跟公司欠了巨债的父母连夜潜逃-？" class="headerlink" title="保罗（浩介）询问要不要跟公司欠了巨债的父母连夜潜逃 ？"></a>保罗（浩介）询问要不要跟公司欠了巨债的父母连夜潜逃 ？</h5>&emsp;&emsp;浪矢爷爷回答的。如果没有决定离开，就相信自己的父母，只要一家人在一起，什么困难都会解决。但是浩介并没有听浪矢爷爷的建议，在途中逃跑了，后来到了丸光园。凭借自己的努力，成为了木雕大师。后来听说浪矢杂货店会在九月十三日复活，就去写回信了。到了附近的一家酒馆。酒馆的老板就是小时候买自己披头士唱片朋友的妹妹。在跟妹妹的交谈中，听到父母在当天逃跑的夜里三个人一起沉海自杀了，父亲没有死，上岸后又自杀了，母亲和儿子一起沉入海底，没有找到遗体。听到这里浩介很震惊。原来他当时讨厌憎恨的父母，为了保护他沉海自杀了。这样其他人就认为他也死了，自然就不会怀疑他活着。</li><li><h5 id="松岗克朗咨询该不该放弃音乐梦想，继承鱼店-？"><a href="#松岗克朗咨询该不该放弃音乐梦想，继承鱼店-？" class="headerlink" title="松岗克朗咨询该不该放弃音乐梦想，继承鱼店 ？"></a>松岗克朗咨询该不该放弃音乐梦想，继承鱼店 ？</h5>&emsp;&emsp;三个少年回答的。克朗对音乐的执着在小时候就已经明显了，以至于后来大学的时候自主退学，去追逐音乐。但是生活并没有随他意愿。在几年后，父亲的身体越来越差，克朗需要在鱼店和音乐之间做个选择，很纠结。于是去咨询，给出的建议是追逐自己的梦想，所有的努力都不会白白付出。后来克朗还是没有实现，去了丸光园做了业余歌手，再一次火灾中为了就一个小男孩，去世了。小男孩的姐姐为了弟弟的恩人，将克朗音乐的梦想实现了。</li><li><h5 id="静子的烦恼是要不要放弃奥运会的训练，陪生病的男友度过最后一段时光-？"><a href="#静子的烦恼是要不要放弃奥运会的训练，陪生病的男友度过最后一段时光-？" class="headerlink" title="静子的烦恼是要不要放弃奥运会的训练，陪生病的男友度过最后一段时光 ？"></a>静子的烦恼是要不要放弃奥运会的训练，陪生病的男友度过最后一段时光 ？</h5>&emsp;&emsp;三个少年回答的。静子是奥运会选手，男友是候补选手。不幸的是男友生病患癌，静子想放弃奥运会的训练陪伴男友，男友坚持要静子去参加训练，完成梦想。三个少年将知道的信息告诉了静子，让静子陪男友，放弃训练，因为日本在那一年放弃了参加奥运会。静子没有听从建议，还是去参加了训练，男友在一年之后去世了。静子也没有参加奥运会，但是静子并没有遗憾，因为他遵从了自己的内心。他很感激浪矢爷爷的回信。</li><li><h5 id="晴美询问要不要继续当陪酒女，做富岗的情人-？"><a href="#晴美询问要不要继续当陪酒女，做富岗的情人-？" class="headerlink" title="晴美询问要不要继续当陪酒女，做富岗的情人 ？"></a>晴美询问要不要继续当陪酒女，做富岗的情人 ？</h5>&emsp;&emsp;三个少年回答的最后一封信。晴美从小失去父母，生活在丸光园，后来被自己姨妈收养，后来姨妈家落魄，晴美需要挣钱改善情况。但是找的正常的工作并不能支撑。所以下班时间去做了陪酒女。三个少年听了晴美的状况和烦恼，决定帮助晴美，告诉她随后几年经济会发生变化，房地产将会发生翻天覆地的变化。让晴美抓住机会，购买房子随后转手卖出。晴美虽然疑惑，但还是听从了建议。后来晴美如愿变成了大老板。她很感激当时的回信。</li><li><h5 id="三个少年（敦也、翔太、幸平）为了验证信是否真的会回到过去，便投了一封空白信-？"><a href="#三个少年（敦也、翔太、幸平）为了验证信是否真的会回到过去，便投了一封空白信-？" class="headerlink" title="三个少年（敦也、翔太、幸平）为了验证信是否真的会回到过去，便投了一封空白信 ？"></a>三个少年（敦也、翔太、幸平）为了验证信是否真的会回到过去，便投了一封空白信 ？</h5>&emsp;&emsp;浪矢爷爷回答的最后一封信。  <blockquote><p>空白表明没有地图，如果来咨询的人比做迷途的羔羊，那他们手里都有一张地图，只是没有去看不知道自己在何种位置。而你的地图是一张空白，即使想决定目的地，也不知道路在哪里。但换个角度想，因为是一张白纸，你可以随心所欲的描绘自己的地图，一切全在你自己。对于你来说，你是自由的，一切在你面前都有无限的可能。</p></blockquote></li></ol><h2 id="《解忧杂货店》经典语录-（—东野圭吾）"><a href="#《解忧杂货店》经典语录-（—东野圭吾）" class="headerlink" title="《解忧杂货店》经典语录 （—东野圭吾）"></a>《解忧杂货店》经典语录 （—东野圭吾）</h2><ol><li>他们都是内心破了个洞，重要的东西正在从破洞逐渐流失。</li><li>不过算了，你爱怎样就怎么样把。照你自己的意思去做，然后使劲后悔吧。</li><li>在电影院看的时候，浩介之所以觉得演出很糟糕，大概是源于自己的心境。当时他已经不相信真情了。</li><li>只要全家同舟共济，一起回到正路上也完全有可能。</li><li>他不知道说什么好，大脑自动拒绝思考。</li><li>跟没有干劲的人在一起厮混，只会徒增压力。</li><li>其实所有纠结做选择的人心里早就有了答案，咨询只是想得到内心所倾向的选择。最终的所谓命运还是自己一步步走出来的。</li><li>如果自己不想积极认真的活着，不管得到什么样的回答都没有用。</li><li>要是什么都按照计划顺利实现，谁还用辛苦打拼？</li><li>人的心声是绝对不能无视的。</li><li>人与人之间情断义绝，并不需要什么具体的理由，就算表面上有，也很可能只是心已经离开的结果，事后才编造出来的接口而已。<u>(心，一旦离开了，就再不会回来)</u></li></ol><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><ul><li>衷心的祈祷你可以相信自己，无悔的燃烧自己的人生。</li><li>用三个误入歧途的少年，讲述了人的善良，最后因为善良，三个少年迷途知返。书中的所有人都是善良的，正是因为他们都是善良的，所以最后的结果都是很美好的。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生就是一张白纸，需要我们自己构图，绘色。心有多大，舞台就有多大。&lt;br&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://zrxmzy.github.io.git/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="books" scheme="http://zrxmzy.github.io.git/tags/books/"/>
    
  </entry>
  
  <entry>
    <title>生物维生素概述</title>
    <link href="http://zrxmzy.github.io.git/2020/04/17/wsx.html/"/>
    <id>http://zrxmzy.github.io.git/2020/04/17/wsx.html/</id>
    <published>2020-04-17T07:42:34.000Z</published>
    <updated>2020-04-23T11:09:43.362Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>维生素是任何动物维持正常的生理功能而必须从食物中获取的一类微量有机物质，在人体生长、代谢、发育过程中发挥着重要的作用。<br>维生素既不参与构成人体细胞，也不为人体提供能量。<br><a id="more"></a></p><h2 id="维生素A"><a href="#维生素A" class="headerlink" title="维生素A"></a>维生素A</h2><p>&emsp;&emsp;作用<br>    &emsp;&emsp;&emsp;&emsp;增强视力。维持粘膜正常功能，令皮肤光洁幼嫩。<br>&emsp;&emsp;被需要<br>    &emsp;&emsp;&emsp;&emsp;夜盲症、眼球干燥、皮肤干燥及痕痒。<br>&emsp;&emsp;来源<br>    &emsp;&emsp;&emsp;&emsp;红萝卜、绿叶蔬菜、蛋黄、动物肝脏等。 </p><h2 id="维生素B6"><a href="#维生素B6" class="headerlink" title="维生素B6"></a>维生素B6</h2><p>&emsp;&emsp;作用<br>    &emsp;&emsp;&emsp;&emsp;保持身体及精神系统处于正常状况，维持体内钠、钾平衡，制造红血球。<br>&emsp;&emsp;被需要<br>    &emsp;&emsp;&emsp;&emsp;贫血、抽筋、头痛、脱皮、呕吐、暗疮。<br>&emsp;&emsp;来源<br>    &emsp;&emsp;&emsp;&emsp;瘦肉、果仁、糙米、绿叶蔬菜、香蕉。  </p><h2 id="维生素B12"><a href="#维生素B12" class="headerlink" title="维生素B12"></a>维生素B12</h2><p>&emsp;&emsp;作用<br>    &emsp;&emsp;&emsp;&emsp;防止贫血，制造红血球，防止神经受到破坏。<br>&emsp;&emsp;被需要<br>    &emsp;&emsp;&emsp;&emsp;疲倦、精神抑郁、记忆力衰退、贫血。<br>&emsp;&emsp;来源<br>    &emsp;&emsp;&emsp;&emsp;肝、鱼、牛奶。</p><h2 id="维生素C"><a href="#维生素C" class="headerlink" title="维生素C"></a>维生素C</h2><p>&emsp;&emsp;作用<br>    &emsp;&emsp;&emsp;&emsp;抗氧化，改善胆固醇代谢，增强免疫力，改善铁、钙和叶酸的利用。<br>&emsp;&emsp;被需要<br>    &emsp;&emsp;&emsp;&emsp;牙肉出血，牙齿脱落易患感冒，伤口愈合缓慢，皮下出血，消化不良等。<br>&emsp;&emsp;来源<br>    &emsp;&emsp;&emsp;&emsp;水果(特别是橙类)、绿色蔬菜、蕃茄、马铃薯等。</p><h2 id="维生素D"><a href="#维生素D" class="headerlink" title="维生素D"></a>维生素D</h2><p>&emsp;&emsp;作用<br>    &emsp;&emsp;&emsp;&emsp;有助小孩牙齿及骨骼发育，补充成人骨骼所需钙质，防止骨质疏松症。<br>&emsp;&emsp;被需要<br>    &emsp;&emsp;&emsp;&emsp;小孩软骨病、食欲不振，腹泻等。<br>&emsp;&emsp;来源<br>    &emsp;&emsp;&emsp;&emsp;鱼肝油、奶制品、蛋。</p><h2 id="维生素E"><a href="#维生素E" class="headerlink" title="维生素E"></a>维生素E</h2><p>&emsp;&emsp;作用<br>    &emsp;&emsp;&emsp;&emsp;抗氧化，预防衰老，提高抗感染能力，改善伤口回复平滑，有助降低血压。<br>&emsp;&emsp;被需要<br>    &emsp;&emsp;&emsp;&emsp;红血球受到破坏，神经受到损害，不育症，手脚皲裂、肌肉受损，子宫机能衰退。<br>&emsp;&emsp;来源<br>    &emsp;&emsp;&emsp;&emsp;冷榨植物油、深绿色蔬菜、蛋、牛奶、肝、麦、及果仁。</p><h2 id="维生素K"><a href="#维生素K" class="headerlink" title="维生素K"></a>维生素K</h2><p>&emsp;&emsp;作用<br>    &emsp;&emsp;&emsp;&emsp;凝血作用，有助修补及骨骼的生长。<br>&emsp;&emsp;被需要<br>    &emsp;&emsp;&emsp;&emsp;不正常体内出血。<br>&emsp;&emsp;来源<br>    &emsp;&emsp;&emsp;&emsp;西兰花椰菜花。椰菜。蛋黄。肝等。</p><h2 id="哪些有关维生素的误区"><a href="#哪些有关维生素的误区" class="headerlink" title="哪些有关维生素的误区"></a>哪些有关维生素的误区</h2><ol><li>误区一<br>× 人人都缺维生素<br>√ 一般人群通过饮食都能摄取都不缺，补充有适用人群</li><li>误区二<br>× 维生素能治病<br>√ 同一种病病因多样，盲目补充维生素并不一定对症</li><li>误区三<br>× 补维生素能代替均衡饮食<br>√ 维生素需 协同作战 ，大量服用一两种作用有限</li></ol><h2 id="那些人需要补充维生素？"><a href="#那些人需要补充维生素？" class="headerlink" title="那些人需要补充维生素？"></a>那些人需要补充维生素？</h2><p>&emsp;&emsp;摄入量少的，如偏食或减肥的人。<br>&emsp;&emsp;需要量大的，如孕妇、青春期的少年。<br>&emsp;&emsp;消化吸收差的人群比如老人、胃肠道疾病患者和特殊疾病群体。</p><h2 id="补充维生素原则"><a href="#补充维生素原则" class="headerlink" title="补充维生素原则"></a>补充维生素原则</h2><p>&emsp;&emsp;最天然的维生素还是要从正常饮食中摄取。<br>&emsp;&emsp;补充维生素不能过量。<br>&emsp;&emsp;最好有医生、营养师指导。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;维生素是任何动物维持正常的生理功能而必须从食物中获取的一类微量有机物质，在人体生长、代谢、发育过程中发挥着重要的作用。&lt;br&gt;维生素既不参与构成人体细胞，也不为人体提供能量。&lt;br&gt;
    
    </summary>
    
    
      <category term="健康常识" scheme="http://zrxmzy.github.io.git/categories/%E5%81%A5%E5%BA%B7%E5%B8%B8%E8%AF%86/"/>
    
    
      <category term="life" scheme="http://zrxmzy.github.io.git/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="http://zrxmzy.github.io.git/2020/04/15/aricle/"/>
    <id>http://zrxmzy.github.io.git/2020/04/15/aricle/</id>
    <published>2020-04-15T09:44:19.000Z</published>
    <updated>2020-04-24T02:20:14.685Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Hexo的nexmoe主题写文章注意事项整理。      </p><a id="more"></a> <h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p>安装Git Bash</p><ul><li><a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载地址</a></li><li>安装步骤：双击下载好的exe文件，一路next就好</li><li>安装好后，打开gitbash,查看版本： git version</li></ul><p>安装NodeJs<br>&emsp;Hexo是基于nodeJS环境的静态博客，里边的npm工具非常有用。</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载地址</a>(说明：LTS为长期支持版，Current为当前最新版)</li><li>安装步骤：双击msi文件，一直next，在Custom Setup这一步选Add to PATH,这样不用自己去配置电脑环境变量。</li><li>查看版本： gitbash中查看版本 node -v</li></ul><p>安装Hexo<br>&emsp;后边的东西都是在gitbash中用npm工具安装就好了。</p><ul><li>创建一个文件夹，blog，cd到该文件夹下。</li><li>安装hexo命令： npm i -g hexo</li><li>查看版本： hexo -v</li><li>初始化命令： hexo init</li><li>解释一下:<ul><li>node_modules：是依赖包</li><li>public：存放的是生成的静态页面</li><li>scaffolds：命令生成文章等用到的模板</li><li>source：用命令创建的各种文章</li><li>themes：主题</li><li>_config.yml：博客的配置</li><li>db.json：source解析所得到的的</li><li>package.json：项目所需模块项目的配置信息</li></ul></li></ul><p>生成SSH秘钥并添加到github</p><ul><li>注册github账号</li><li>创建仓库repo（New repository），名称为yourname.github.io,其中yourname是你的github名称</li><li>命令：<ul><li>git config —global user.name “YourName”</li><li>git config —global user.email “YourEmail”</li></ul></li><li>创建SSH<ul><li>命令： ssh -keygen -t rsa -C “youremail@example.com”,生成ssh.</li></ul></li><li>复制ssh内容到github中<ul><li>ssh内容位置： cd ~/.ssh    cat id_rsa.pub</li><li>github存放位置： Settings —&gt; SSH and GPG keys —&gt; New SSH key</li></ul></li><li>验证：命令： ssh -T git@github.com</li><li>修改_config.yml文件配置（冒号后边都是有一个半角空格的） <pre><code>  deploy:      type: git      repo: https://githhub.com/YourgithubName/YourgithubName.github.io.git      branch: master </code></pre></li></ul><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><ul><li>命令<ul><li>hexo clean</li><li>hexo generate</li><li>hexo server</li></ul></li><li>浏览器输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></li><li>上传到github<ul><li>安装： npm install hexo-deployer-git —save(这样才能将写好的文章部署到github服务上)</li><li>执行命令<ul><li>hexo clean</li><li>hexo generate</li><li>hexo deploy</li></ul></li></ul></li><li>绑定个人域名<br>此处不做介绍，自行解决。</li></ul><h2 id="修改配置及主题"><a href="#修改配置及主题" class="headerlink" title="修改配置及主题"></a>修改配置及主题</h2><ul><li>hexo初始化之后默认主题是landscape，<a href="https://hexo.io/themes/" target="_blank" rel="noopener">这个地址</a>找需要的主题。</li></ul><h2 id="添加RSS（此步骤没做相关测试）"><a href="#添加RSS（此步骤没做相关测试）" class="headerlink" title="添加RSS（此步骤没做相关测试）"></a>添加RSS（此步骤没做相关测试）</h2><ul><li>安装RSS相关插件： npm i hexo-generator-feed</li><li>在项目的_config.yml文件中找到Extensions添加如下内容<pre><code class="lang-$xslt">plugin:  hexo-generator-feedfeed:  type: atom  path: atom.xml  limit: 20</code></pre></li><li>主题配置文件下，找到rss的位置，添加/atom.xml</li></ul><h2 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h2><ul><li>选一个使用的第三方评论系统</li><li>在主题的配置文件下找到comment，添加一行： yungentie(此处自行配置)</li><li>注册完评论系统后获取相应的代码，在主题的layout下找到comment新建一个ejs文件，名称自定义<br>【举例（gitalk）】：</li></ul><ol><li>注册 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">Register a new OAthub application</a><ul><li>Application name：随便写</li><li>Homepage URL：网站主页的地址</li><li>Application description：随便写</li><li>Authorization callback URL：网站主页地址</li><li>最后生成Client ID和Client Secret</li></ul></li><li>修改配置文件中关于评论的部分<ul><li>填写Client ID 和 Client Secret</li><li>repo 是存放评论的仓库地址</li><li>admin和owner可以是用户名</li></ul></li></ol><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><ul><li>在source下新建文件夹 hexo new page</li><li>新建文件一般默认保存在_posts文件夹下， hexo new post 文件名称</li></ul><h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><ul><li>安装插件<br>  npm uninstall hexo-generator-index —save<br>  npm install hexo-generator-index-pin-top —save</li><li>post.ejs 开头添加<pre><code>  &lt;% if (page.top) { %&gt;      &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;      &lt;font color=7D26CD&gt;置顶&lt;/font&gt;      &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;  &lt;% } %&gt;</code></pre></li><li>文章开头加top <pre><code>      title: 生物维生素概述      date: 2020-04-17 15:42:34      tags:           - 生活      categories:          - 健康常识      cover: /images/weishengsu.jpg       coverWidth: 1440      coverHeight: 960        permalink: wsx.html      hide_copyright: true      comment: true      top: 10 </code></pre><strong> 文章置顶顺序按照top的值，从大到小排，top值大的置顶在top值小的前边</strong></li></ul><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>hexo配置文件.config.xml文件中配置</p><pre><code>    ## 首页 显示文章数及分页    index_generator:        path: &#39;&#39;        per_page: 5        order_by: -date    # Pagination 分页    ## Set per_page to 0 to disable pagination    per_page: 5 # 每页显示的文章量（0=关闭分页功能） 默认10    pagination_dir: page # 分页目录 默认page</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo的nexmoe主题写文章注意事项整理。      &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://zrxmzy.github.io.git/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="http://zrxmzy.github.io.git/2020/04/15/hello-world/"/>
    <id>http://zrxmzy.github.io.git/2020/04/15/hello-world/</id>
    <published>2020-04-15T09:16:10.827Z</published>
    <updated>2020-04-15T09:16:10.827Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code>$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server-启动服务"><a href="#Run-server-启动服务" class="headerlink" title="Run server 启动服务"></a>Run server 启动服务</h3><pre><code>$ hexo server </code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code>$ hexo generate </code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites-部署到github"><a href="#Deploy-to-remote-sites-部署到github" class="headerlink" title="Deploy to remote sites 部署到github"></a>Deploy to remote sites 部署到github</h3><pre><code>$ hexo deploy </code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
